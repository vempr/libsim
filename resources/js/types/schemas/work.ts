import { z } from 'zod';

// prettier-ignore
export const languages = {
  aa: 'Afar',
  ab: 'Abkhazian',
  ae: 'Avestan',
  af: 'Afrikaans',
  ak: 'Akan',
  am: 'Amharic',
  an: 'Aragonese',
  ar: 'Arabic',
  as: 'Assamese',
  av: 'Avaric',
  ay: 'Aymara',
  az: 'Azerbaijani',
  ba: 'Bashkir',
  be: 'Belarusian',
  bg: 'Bulgarian',
  bh: 'Bihari languages',
  bi: 'Bislama',
  bm: 'Bambara',
  bn: 'Bengali',
  bo: 'Tibetan',
  br: 'Breton',
  bs: 'Bosnian',
  ca: 'Catalan; Valencian',
  ce: 'Chechen',
  ch: 'Chamorro',
  co: 'Corsican',
  cr: 'Cree',
  cs: 'Czech',
  cu: 'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic',
  cv: 'Chuvash',
  cy: 'Welsh',
  da: 'Danish',
  de: 'German',
  dv: 'Divehi; Dhivehi; Maldivian',
  dz: 'Dzongkha',
  ee: 'Ewe',
  el: 'Greek',
  en: 'English',
  eo: 'Esperanto',
  es: 'Spanish; Castilian',
  et: 'Estonian',
  eu: 'Basque',
  fa: 'Persian',
  ff: 'Fulah',
  fi: 'Finnish',
  fj: 'Fijian',
  fo: 'Faroese',
  fr: 'French',
  ga: 'Irish',
  gd: 'Gaelic; Scottish Gaelic',
  gl: 'Galician',
  gn: 'Guarani',
  gu: 'Gujarati',
  gv: 'Manx',
  ha: 'Hausa',
  he: 'Hebrew',
  hi: 'Hindi',
  ho: 'Hiri Motu',
  hr: 'Croatian',
  ht: 'Haitian; Haitian Creole',
  hu: 'Hungarian',
  hy: 'Armenian',
  hz: 'Herero',
  ia: 'Interlingua (International Auxiliary Language Association)',
  id: 'Indonesian',
  ie: 'Interlingue; Occidental',
  ig: 'Igbo',
  ii: 'Sichuan Yi; Nuosu',
  ik: 'Inupiaq',
  io: 'Ido',
  is: 'Icelandic',
  it: 'Italian',
  iu: 'Inuktitut',
  ja: 'Japanese',
  jv: 'Javanese',
  ka: 'Georgian',
  kg: 'Kongo',
  ki: 'Kikuyu; Gikuyu',
  kj: 'Kwanyama; Kuanyama',
  kk: 'Kazakh',
  kl: 'Kalaallisut; Greenlandic',
  km: 'Khmer',
  kn: 'Kannada',
  ko: 'Korean',
  kr: 'Kanuri',
  ks: 'Kashmiri',
  ku: 'Kurdish',
  kv: 'Komi',
  kw: 'Cornish',
  ky: 'Kirghiz; Kyrgyz',
  la: 'Latin',
  lb: 'Luxembourgish; Letzeburgesch',
  lo: 'Lao',
  lt: 'Lithuanian',
  lu: 'Luba-Katanga',
  lv: 'Latvian',
  mg: 'Malagasy',
  mh: 'Marshallese',
  mk: 'Macedonian',
  ml: 'Malayalam',
  mn: 'Mongolian',
  mr: 'Marathi',
  ms: 'Malay',
  mt: 'Maltese',
  my: 'Burmese',
  na: 'Nauru',
  nb: 'Norwegian Bokmål',
  nd: 'Northern Ndebele',
  ne: 'Nepali',
  nl: 'Dutch',
  nn: 'Norwegian Nynorsk',
  no: 'Norwegian',
  nr: 'Southern Ndebele',
  nv: 'Navajo; Navaho',
  ny: 'Chichewa; Chewa; Nyanja',
  oc: 'Occitan (post 1500); Provençal',
  oj: 'Ojibwe; Ojibwa',
  om: 'Oromo',
  or: 'Oriya',
  os: 'Ossetian; Ossetic',
  pa: 'Punjabi',
  pi: 'Pali',
  pl: 'Polish',
  ps: 'Pashto; Pushto',
  pt: 'Portuguese',
  qu: 'Quechua',
  rm: 'Romansh',
  rn: 'Rundi',
  ro: 'Romanian; Moldavian; Moldovan',
  ru: 'Russian',
  rw: 'Kinyarwanda',
  se: 'Northern Sami',
  sg: 'Sango',
  si: 'Sinhala; Sinhalese',
  sk: 'Slovak',
  sl: 'Slovenian',
  sm: 'Samoan',
  sn: 'Shona',
  so: 'Somali',
  sq: 'Albanian',
  sr: 'Serbian',
  ss: 'Swati',
  st: 'Southern Sotho',
  su: 'Sundanese',
  sv: 'Swedish',
  sw: 'Swahili',
  ta: 'Tamil',
  te: 'Telugu',
  tg: 'Tajik',
  th: 'Thai',
  ti: 'Tigrinya',
  tk: 'Turkmen',
  tl: 'Tagalog',
  tn: 'Tswana',
  to: 'Tongan',
  tr: 'Turkish',
  ts: 'Tsonga',
  tt: 'Tatar',
  tw: 'Twi',
  ty: 'Tahitian',
  ug: 'Uighur; Uyghur',
  uk: 'Ukrainian',
  ur: 'Urdu',
  uz: 'Uzbek',
  ve: 'Venda',
  vi: 'Vietnamese',
  vo: 'Volapük',
  wa: 'Walloon',
  wo: 'Wolof',
  xh: 'Xhosa',
  yi: 'Yiddish',
  yo: 'Yoruba',
  za: 'Zhuang; Chuang',
  zh: 'Chinese',
  zu: 'Zulu',
} as const;

const languagesKeys = Object.keys(languages) as [string, ...string[]];
export const languageSchema = z.enum(languagesKeys);
export type LanguageCode = z.infer<typeof languageSchema>;

export const publicationStatuses = ['unknown', 'ongoing', 'completed', 'hiatus', 'cancelled'] as const;
export const readingStatuses = ['reading', 'completed', 'on hold', 'dropped'] as const;

export const dbWorkSchema = z.object({
  id: z.number(),
  user_id: z.number(),
  title: z.string(),
  description: z.string().nullable(),
  status_publication: z.enum(publicationStatuses).nullable(),
  status_reading: z.enum(readingStatuses),
  author: z.string().nullable(),
  language_original: languageSchema.nullable(),
  language_translated: languageSchema.nullable(),
  publication_year: z.number().nullable(),
  image: z.string().nullable(),
  tags: z.string().nullable(),
  links: z.string().nullable(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
});

export const workFormSchema = z.object({
  title: z.string().min(1, 'Title is required').max(255, 'Title cannot be longer than 255 characters'),
  description: z.string().max(2000, 'Description cannot exceed 2000 characters').optional(),
  status_publication: z.enum(publicationStatuses).optional(),
  status_reading: z.enum(readingStatuses),
  author: z.string().max(255, "Author's name can't be longer than 255 characters").optional(),
  language_original: languageSchema.optional(),
  language_translated: languageSchema.optional(),
  publication_year: z.coerce
    .number()
    .min(-5000, 'Publication year cannot be earlier than 5000 BCE')
    .max(5000, 'Publication year cannot be later than 5000 CE')
    .optional(),
  image: z.string().max(255, 'Image URL cannot exceed 255 characters').optional(),
  tags: z.string().max(1000, 'Tags cannot exceed 1000 characters').optional(),
  links: z.string().max(3000, 'Links cannot exceed 3000 characters').optional(),
});

export const searchSchema = z.object({
  q: z.string().max(255, "Query can't be longer than 255 characters").optional(),
  author: z.string().max(255, "Author's name can't be longer than 255 characters").nullable().optional(),
  tags: z.string().max(1000, 'Tags cannot exceed 1000 characters').nullable().optional(),
  language_original: languageSchema.nullable().optional(),
  language_translated: languageSchema.nullable().optional(),
  status_publication: z.enum(publicationStatuses).nullable().optional(),
  status_reading: z.enum(readingStatuses).nullable().optional(),
  publication_year: z.coerce
    .number()
    .min(-5000, 'The publication year cannot be earlier than -5000')
    .max(5000, 'The publication year cannot be later than 5000')
    .optional(),
});

export type Work = z.infer<typeof dbWorkSchema>;
export type WorkFormInput = z.infer<typeof workFormSchema>;
export type SearchInput = z.infer<typeof searchSchema>;
const ps = z.enum(publicationStatuses);
export type PublicationStatus = z.infer<typeof ps>;
const rs = z.enum(readingStatuses);
export type ReadingStatus = z.infer<typeof rs>;
